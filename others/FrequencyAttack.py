def CheckScore(data):
	charFrequencies = {
		'a': 0.08167, 'b': 0.01492, 'c': 0.02782, 'd': 0.04253,
		'e': 0.12702, 'f': 0.02228, 'g': 0.02015, 'h': 0.06094,
		'i': 0.06094, 'j': 0.00153, 'k': 0.00772, 'l': 0.04025,
		'm': 0.02406, 'n': 0.06749, 'o': 0.07507, 'p': 0.01929,
		'q': 0.00095, 'r': 0.05987, 's': 0.06327, 't': 0.09056,
		'u': 0.02758, 'v': 0.00978, 'w': 0.02360, 'x': 0.00150,
		'y': 0.01974, 'z': 0.00074, ' ': 0.15
	}
	return sum([charFrequencies.get(chr(i), 0) for i in data.lower()])

def ByteXor(data, byte):
	result = b""
	result += bytes([byte ^ i for i in data])
	return result

def BruteFrequency(cipher):
	scoreList = []
	for byteKey in range(256):
		msg = ByteXor(cipher, byteKey)
		score = CheckScore(msg)
		scoreList.append({"score": score, "key": bytes([byteKey])})
	return sorted(scoreList, reverse = True, key = lambda x: x["score"])

ciphertext = bytes.fromhex("5972D7A4711F44922DCEE23B54F170A52746C4A57B403BBF17E4C2206CC55DB43755FAA8734814A91BEFD31173CD5FB87D57CAA616710BE15EE4C40670D05F963046DCBB32510BD13DC48C5F49F779821760F08B6F5116BA10E0D32064CD53A20C58C4A67E4105841DE8DB0F72C158B33D47CCA4720B07B4138DF70B74C553BE3E51CBBF6F1F44B817F7DE1A72AE74B33246859875574B961FE3D7122CAE79F63B55D3AE3C4444B51BF0961C72DD40A23C47DCB8684009FB0EF5D90F6FD751BA7F14ECEC6A4044BD11F2D81B20C510A1324D85BF73050CBA08E2960F65D656B3304085AE724616A20EF3DF106E8451B83714D1A3755644B20DA7D21A66CD5EBF2751C9B23C4B0BAF5EF7D90C73CD52BA3614D1A43C4101B80CFEC60B2E8479F63B55D3AE3C4408A811A7D31163D649A62751C1EB794805B212A7D711648451A22755C6A3794144AF16E2961C69D458B32114CCA53C510CBE5EE1DF13658417B53A44CDAE6E0244AF16E6C25F69D710B72740C4A8744000FB17E9960B68CD43F63659C4A2700505A85EF0D3136C8A109F7356C0A7754012BE5EF3DE1E748459A2735DD6EB724A10FB0EE8C50C69C65CB37340CAEB784007A907F7C25F62D144F62A5BD0EB71441DFB0AF5CF5F77CD44BE7340CDAE3C4410AF1FE4DE1A648456BF3F518BC1454A11A90DA7E5166EC755A43658DCE7166C37922AC3E22A7B9107A4675A93F8434155B849D8DA4B6DC654E20C5795A66C5757B34DE9834E30CA4DDC4324B5DB0C3574CB6E97A66F10B420C6")
cipherLength = len(ciphertext)
keyLength = 16

key = b""
for i in range(keyLength):
	cipher = b""
	cipher += bytes([ciphertext[j] for j in range(i, cipherLength, keyLength)])
	key += BruteFrequency(cipher)[0]["key"]

print("key: {}".format(key))
plaintext = b""
plaintext += bytes([ciphertext[i] ^ key[i % keyLength] for i in range(cipherLength)])
print("plaintext: {}".format(plaintext)