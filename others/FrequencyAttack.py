def CheckScore(data):
	charFrequencies = {
		'a': 0.08167, 'b': 0.01492, 'c': 0.02782, 'd': 0.04253,
		'e': 0.12702, 'f': 0.02228, 'g': 0.02015, 'h': 0.06094,
		'i': 0.06094, 'j': 0.00153, 'k': 0.00772, 'l': 0.04025,
		'm': 0.02406, 'n': 0.06749, 'o': 0.07507, 'p': 0.01929,
		'q': 0.00095, 'r': 0.05987, 's': 0.06327, 't': 0.09056,
		'u': 0.02758, 'v': 0.00978, 'w': 0.02360, 'x': 0.00150,
		'y': 0.01974, 'z': 0.00074, ' ': 0.15
	}
	return sum([charFrequencies.get(chr(i), 0) for i in data.lower()])

def ByteXor(data, byte):
	result = b""
	result += bytes([byte ^ i for i in data])
	return result

def BruteFrequency(cipher):
	scoreList = []
	for byteKey in range(256):
		msg = ByteXor(cipher, byteKey)
		score = CheckScore(msg)
		scoreList.append({"score": score, "key": bytes([byteKey])})
	return sorted(scoreList, reverse = True, key = lambda x: x["score"])

def main(ciphertext, keyLength):
	cipherLength = len(ciphertext)

	key = b""
	for i in range(keyLength):
		cipher = b""
		cipher += bytes([ciphertext[j] for j in range(i, cipherLength, keyLength)])
		key += BruteFrequency(cipher)[0]["key"]

	print("key: {}".format(key))
	plaintext = b""
	plaintext += bytes([ciphertext[i] ^ key[i % keyLength] for i in range(cipherLength)])
	print("plaintext: {}".format(plaintext))

main(bytes.fromhex("53532f70702f37372f7a7a2f3e3e38382f74742f30302f29292f575730302f70702f5a5a2f3c3c2f282877772f43432f60602f33332f757525252f58582f38382f59592f707034342f7a7a2f4f4f2f3d3d2f24245a5a2f68682f38382f6a6a2f2d2d73732f4b4b2f5e5e2f33332f6e6e2e2e2f66662f4c4c2f2d2d2f353529292f71712f53532f60602f373728282f78782f58582f2e2e2f323241412f69692f33332f79792f2d2d67672f41412f4f4f2f28282f32323e3e2f73732f50502f3f3f2f383868682f38382f2e2e2f41412f383871712f4e4e2f26262f37372f2a2a78782f43432f47472f2b2b2f363675752f4c4c2f29292f34342f636335352f47472f61612f4b4b2f292938382f70702f52522f5e5e2f282861612f49492f7e7e2f35352f2d2d43432f71712f34342f69692f24247a7a2f34342f3d3d2f58582f333346462f65652f35352f34342f262658582f6c6c2f35352f62622f2a2a32322f67672f36362f25252f474771712f39392f7c7c2f47472f35354a4a2f6b6b2f30302f30302f404032322f70702f55552f3c3c2f3e3e29292f53532f78782f79792f363652522f72722f34342f6c6c2f23236a6a2f41412f59592f25252f353533332f7a7a2f42422f23232f40407e7e2f50502f36362f4e4e2f696946462f6b6b2f34342f39392f3d3d3e3e2f4c4c2f35352f4f4f2f676762622f41412f2e2e2f38382f242451512f68682f38382f77772f2d2d78782f43432f60602f35352f707049492f64642f36362f74742f5f5f63632f45452f40402f39392f6a6a2e2e2f49492f36362f43432f6e6e38382f65652f33332f28282f434367672f30302f40402f42422f31315e5e2f46462f69692f61612f323239392f45452f79792f51512f242468682f53532f7e7e2f36362f262647472f72722f31312f36362f2b2b79792f54542f7c7c2f38382f3e3e4a4a2f71712f39392f64642f252538382f51512f6d6d2f45452f404024242f62622f58582f2a2a2f333324242f44442f32322f56562f67672c2c2f6d6d2f42422f7e7e2f37375f5f2f54542f66662f72722f373744442f62622f31312f74742f3d3d68682f33332f25252f55552f343435352f69692f38382f3f3f2f484838382f56562f73732f50502f5f5f31312f56562f79792f54542f28284b4b2f75752f37372f66662f7c7c37372f4e4e2f76762f42422f5e5e65652f4e4e2f40402f35352f3f3f70702f4f4f2f3f3f2f32322f6262"), 14)