import random

def QuickSR(number, prime):
	return pow(number, (prime + 1) // 4, prime)

def QandS(prime):
	s = 0
	tmpPrime = prime - 1
	while tmpPrime % 2 == 0:
		s += 1
		tmpPrime //= 2

	return s, (prime - 1) // pow(2, s)

def RandomQNR(prime):
	z = random.randint(1, prime - 1)
	while LegendreCheck(z, prime):
		z = random.randint(1, prime - 1)

	return z

def LegendreCheck(number, prime):
	if pow(number, (prime - 1) // 2, prime) == 1:
		return True

	return False

def Tonelli_Shanks(number, prime):
	S, Q = QandS(prime)
	z = RandomQNR(prime)
	M, c, t, R = S, pow(z, Q, prime), pow(number, Q, prime), pow(number, (Q + 1) // 2, prime)
	while True:
		if t == 0:
			return 0
		elif t == 1:
			return R

		i = 0
		for j in range(1, M):
			if pow(t, pow(2, j), prime) == 1:
				i = j
				break

		b = pow(c, pow(2, M - i - 1), prime)
		M, c, t, R = i, (b * b) % prime, (t * b * b) % prime, (R * b) % prime

def main(number, prime):
	isQNR = LegendreCheck(number, prime)
	if isQNR and prime % 4 == 3:
		return QuickSR(number, prime)
	elif isQNR and prime % 4 == 1:
		return Tonelli_Shanks(number, prime)
	else:
		return None

a = 88258956762700613958955299912097800594119620350032806940856697568762192152763752561585792527046164278041706727307367969493777386372006706322341212194373545927518982335467917474644299643970404946974793220332380142050262560283148637612567125434998736620031801706692152505500720137740229699023030499933206486452970404059909392979734081434912115554926367518824931411460132612431197816401

n = 6709908271017636273378655032643421210567975544297596915593470137128363891228419512657274114669011891942663090194905940777812561840118056588428615370768885092202739470181344818071226713472147749259310788573428481022337413249410993247950922905606644328528192943149444979234186887778743327152264963995552199639516334711772886596304023688804194352785222469981515261437190030385869298033630451369031363005751953854690763993170983549216454881262214787640404401540368982811803830518044862679244774316554303060596087036766585181264228754533884686157605874994816602077647771821154174017913840152663341574258319064731734285760120757142699366635818090921302212163494224026153096257118848542085578751569398418767290380960045993906298155744307585160054373394289318601600049110591936546458514375137447927136123305276472066985894412133850945593125430051050782975296823192677589524309974575965049652679106537699815859361332255355304073828912153633031918384020344454320846509291701047296552969792343877167445711589879582318737790689596530198981403204253053646510518423927646404039101183559872205057776835009335526749058360229304128875012756435061325738256749504976724101945923621936319816392889120956770374512063428722147098976329869

print(main(a, n))